---
import Icon from './Icon.astro';
import openIcon from '../assets/icons/ion--open.svg?raw';

import { type LanguagesValue } from '../util/languages';

export interface Props {
  href?: string;
  lang?: LanguagesValue;
  openInNewTab?: boolean;
}

const {
  href = '',
  lang = Astro.locals.lang,
  openInNewTab = false,
} = Astro.props;

// FIXME Only replace from beginning of string
const site = Astro.site!.toString();
const pretty_print = href
  .replace('mailto:', '')
  .replace('https://', '')
  .replace('http://', '');
const pretty_screen = href
  .replace('mailto:', '')
  .replace(site, '')
  .replace('https://', '')
  .replace('http://', '');

const target = openInNewTab ? '_blank' : '_self';
const rel = openInNewTab ? 'noopener noreferrer' : '';
---

<style>
  a {
    color: var(--bbon-color-primary);
    text-decoration: underline;
    overflow-wrap: break-word;
    page-break-inside: avoid;

    .new-tab {
      /* this is for the bbonLogo: it needs to be primary */
      --bbon-color-surface: var(--bbon-color-primary);
    }
  }

  a:active {
    color: var(--bbon-color-secondary);

    .new-tab {
      /* this is for the bbonLogo: it needs to be primary */
      --bbon-color-surface: var(--bbon-color-secondary);
    }
  }

  @media print {
    a {
      text-decoration: none;
      font-weight: var(--link-font-weight, bold);
    }

    a:active {
      color: var(--bbon-color-primary);
    }
  }
</style>
<a
  href={href}
  hreflang={lang}
  target={target}
  rel={rel}
>
  <slot />
  {
    !Astro.slots.has('default') &&
      (Astro.locals.isPrint ? (
        <span> {pretty_print} </span>
      ) : (
        <span> {pretty_screen} </span>
      ))
  }
  {
    openInNewTab && !Astro.locals.isPrint && (
      <span class="new-tab">
        <Icon
          html={openIcon}
          size="1em"
        />
      </span>
    )
  }
</a>
