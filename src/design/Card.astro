---
import { getLanguageDirection } from '../util/get-language-direction';
import { type LanguagesValue } from '../util/languages';

interface Props {
  lang?: LanguagesValue;
  size?: 'small' | 'medium' | 'big';
  variant?: 'primary' | 'secondary';
  invalid?: boolean;
}

const {
  lang = Astro.locals.lang,
  variant = 'primary',
  invalid = false,
  size = 'big',
} = Astro.props;
---

<style>
  .-primary {
    --card-link-color-main-dark: var(--bbon-color-primary);
    --card-link-color-active: var(--bbon-color-primary-dark);
    --card-link-color-font: var(--bbon-color-primary);
    --card-link-color-surface-fx: var(--bbon-color-surface);
    --card-link-color-surface: var(--bbon-color-surface-dark);
  }

  .-secondary {
    --card-link-color-main-dark: var(--bbon-color-secondary-dark);
    --card-link-color-active: var(--bbon-color-secondary-dark);
    --card-link-color-font: var(--bbon-color-surface);
    --card-link-color-surface-fx: var(--bbon-color-secondary-bright);
    --card-link-color-surface: var(--bbon-color-secondary);
  }

  .card {
    height: calc(100% - 3 * var(--bbon-size-spacing));
    color: var(--card-link-color-font);
    display: block;
    padding: var(--bbon-size-spacing);
    border: var(--bbon-size-border) solid var(--card-link-color-main-dark);
    border-radius: var(--bbon-size-border);

    /* FIXME: extract shadow */
    box-shadow: var(--bbon-size-shadow-spread)
      calc(var(--bbon-size-shadow-spread) * 0.8) 0 0
      var(--card-link-color-main-dark);

    /* Optically center the box, since the shadow is not part of the box-size  */
    margin: 0 calc(0.5 * var(--bbon-size-shadow-spread))
      calc(0.5 * var(--bbon-size-shadow-spread)) 0;
    font-weight: 500;
    letter-spacing: normal;

    /* Add a very subtle background gradient between surface color and light grey an surface color */
    background: linear-gradient(
      110deg,
      var(--card-link-color-surface),
      var(--card-link-color-surface) 45%,
      var(--card-link-color-surface-fx) 50%,
      var(--card-link-color-surface) 55%,
      var(--card-link-color-surface)
    );
    background-size: 600%;

    &.-invalid {
      cursor: not-allowed;
    }

    &.-small,
    &.-medium {
      /* FIXME: extract shadow */
      box-shadow: calc(var(--bbon-size-shadow-spread) * 0.42)
        calc(var(--bbon-size-shadow-spread) * 0.35) 0 0
        var(--card-link-color-main-dark);
    }

    &.-medium {
      font-size: var(--bbon-size-h3);
    }

    &.-big {
      font-size: var(--bbon-size-h2);
    }

    &:not(.-invalid) {
      animation: anime 2s linear infinite;

      &:hover {
        background: var(--card-link-color-surface-fx);
        transform: rotate(0.35deg);
      }

      &:active {
        color: var(--card-link-color-active);
        border-color: var(--card-link-color-active);

        /* FIXME: extract shadow */
        box-shadow:
          var(--bbon-size-shadow-spread) 7px 0 0 var(--card-link-color-active),
          16px 19px 40px -31px rgb(0 0 0 / 40%),
          inset 1px 0 9px rgb(0 0 0 / 15%);
      }

      &.-secondary:active {
        color: var(--card-link-color-font);
        border-color: var(--card-link-color-active);
        background: var(--card-link-color-surface);
      }

      &.-small:active {
        /* FIXME: extract shadow */
        box-shadow: calc(var(--bbon-size-shadow-spread) * 0.4)
          calc(var(--bbon-size-shadow-spread) * 0.1) 0 0
          var(--card-link-color-active);
      }
    }
  }

  @keyframes anime {
    0% {
      background-position: 100% 50%;
    }

    100% {
      background-position: 0 50%;
    }
  }
</style>
<div
  class={`card
   ${getLanguageDirection(lang)}
   -${size}
   ${variant === 'primary' ? '-primary' : '-secondary'}
   ${invalid ? '-invalid' : ''}
    `}
>
  <slot />
</div>
