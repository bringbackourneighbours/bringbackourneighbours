---
import { type CollectionEntry, getCollection } from 'astro:content';

import Block from '../../../../components/markdown/Block.astro';
import ContentHeading from '../../../../components/ContentHeading.astro';
import ContentLayout from '../../../../layouts/ContentLayout.astro';
import LanguageSwitcher from '../../../../components/design/LanguageSwitcher.astro';
import TableOfContents from '../../../../components/design/TableOfContents.astro';

import { getCanonicalUrlToPage } from '../../../../util/get-canonical-url';
import { getStaticPathsForStandalone } from '../../../../util/get-static-paths-for-standalone';
import { getTranslationsUrlsForPages } from '../../../../util/get-translations-url';
import { redirectNotTranslatedForPage } from '../../../../util/redirect-not-found-or-not-translated';
import { useContentData } from '../../../../util/use-content-data';
import { Languages } from '../../../../model/languages';

interface Props {
  entry: CollectionEntry<'pages'>;
}

export async function getStaticPaths() {
  return getStaticPathsForStandalone(await getCollection('pages'));
}

const { entry } = Astro.props;

const redirectResponse = await redirectNotTranslatedForPage(entry);

if (redirectResponse) {
  return Astro.redirect(redirectResponse.url, redirectResponse.status);
}

const translationSlugs = await getTranslationsUrlsForPages(
  await getCollection('pages'),
  entry.data.lang,
  entry.data.identifier,
);

const canonicalUrl =
  (await getCanonicalUrlToPage(entry.data.lang, entry.data.identifier)) || '';

const germanTitle =
  (await useContentData('pages', entry.data.identifier, Languages.GERMAN))
    ?.title || '';
---

<ContentLayout
  lang={entry.data.lang}
  title={entry.data.title}
  seo={entry.data.seo}
  canonicalSlug={canonicalUrl}
  translationSlugs={translationSlugs}
>
  <LanguageSwitcher
    lang={entry.data.lang}
    translationSlugs={translationSlugs}
  />
  <ContentHeading
    entry={entry}
    collection="pages"
    germanTitle={germanTitle}
    canonicalUrl={canonicalUrl}
  />
  <TableOfContents rendered={entry.render()} />

  <Block
    identifier={entry.data.identifier}
    collection="pages"
  />
</ContentLayout>
