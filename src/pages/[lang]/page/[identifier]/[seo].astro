---
import { getCollection, type CollectionEntry } from 'astro:content';
import BaseLayout from '../../../../layouts/BaseLayout.astro';
import MarkdownEntry from '../../../../design/MarkdownEntry.astro';

export async function getStaticPaths() {
  const pageEntries = await getCollection('pages');
  return pageEntries.map((entry: CollectionEntry<'pages'>) => {
    return {
      params: {
        lang: entry.data.lang,
        identifier: entry.data.identifier,
        seo: entry.data.seo,
      },
      props: { entry },
    };
  });
}

// we lose the type here... not sure why
const { entry } = Astro.props;

const translations = (await getCollection('pages'))
  .filter((page) => {
    return (
      page.data.identifier === entry.data.identifier &&
      page.data.lang !== entry.data.lang
    );
  })
  .map((page) => {
    return {
      lang: page.data.lang,
      url: `${Astro.site}/${page.data.lang}/page/${page.data.identifier}/${page.data.seo}`,
    };
  });

if (entry.data?.fallback) {
  // this could be a middleware
  return Astro.redirect(
    `${Astro.site}/${entry.data?.fallback}/page/${entry.data.identifier}`,
    301,
  );
}
---

<BaseLayout
  lang={entry.data.lang}
  title={entry.data.title}
  canonicalSlug={`${Astro.site}/${entry.data.lang}/flyer/${entry.data.identifier}/${entry.data.seo}`}
  translationSlugs={translations}
>
  <h1>{entry.data.title}</h1>
  <MarkdownEntry rendered={entry.render()} />
</BaseLayout>
