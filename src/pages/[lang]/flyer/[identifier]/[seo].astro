---
import { getCollection, type CollectionEntry } from 'astro:content';
import BaseLayout from '../../../../layouts/BaseLayout.astro';
import MarkdownEntry from '../../../../design/MarkdownEntry.astro';

export async function getStaticPaths() {
  return (await getCollection('flyers')).map(
    (entry: CollectionEntry<'flyers'>) => {
      return {
        params: {
          lang: entry.data.lang,
          identifier: entry.data.identifier,
          seo: entry.data.seo,
        },
      };
    },
  );
}

const { lang, identifier } = Astro.params;

const allFlyers = await getCollection('flyers');

const alternativeTranslations = allFlyers
  .filter((flyer) => {
    return flyer.data.identifier === identifier && flyer.data.lang !== lang;
  })
  .map((flyer) => {
    return {
      lang: flyer.data.lang,
      url: `${Astro.site}/${flyer.data.lang}/flyer/${flyer.data.identifier}/${flyer.data.seo}`,
    };
  });
const entry: CollectionEntry<'flyers'> = allFlyers.find(
  (flyer) => flyer.data.identifier === identifier && flyer.data.lang === lang,
)!;

if (entry.data?.fallback) {
  // this could be a middleware
  return Astro.redirect(
    `${Astro.site}/${entry.data?.fallback}/flyer/${entry.data.identifier}`,
    301,
  );
}
---

<BaseLayout
  lang={entry.data.lang}
  title={entry.data.title}
  canonicalSlug={`${Astro.site}/${entry.data.lang}/flyer/${entry.data.identifier}/${entry.data.seo}`}
  translationSlugs={alternativeTranslations}
>
  <hgroup>
    <h1>{entry.data.title}</h1>
    <!-- FIXME: Element ul is not allowed here -->
    <ul class="meta semantic-list">
      <li>{entry.data.lang} â€“ {entry.data.germanTitle}</li>
      <li>
        <!-- FIXME: Use proper locales for date, drop timezone output -->
        Stand:
        <time datetime={entry.data.lastChecked.toLocaleString()}
          >{entry.data.lastChecked}</time
        >
      </li>
    </ul>
  </hgroup>
  <MarkdownEntry entry={entry} />
</BaseLayout>
