---
import { getEntry, getCollection, type CollectionEntry } from 'astro:content';
import MarkdownEntry from '../../../../design/MarkdownEntry.astro';
import ContentLayout from '../../../../layouts/ContentLayout.astro';
import { getCanonicalUrlToFlyer } from '../../../../util/get-canonical-url-to-flyer';

export async function getStaticPaths() {
  return (await getCollection('flyers')).map(
    (entry: CollectionEntry<'flyers'>) => {
      return {
        params: {
          lang: entry.data.lang,
          identifier: entry.data.identifier,
          seo: entry.data.seo,
        },
      };
    },
  );
}

const { lang, identifier } = Astro.params;

const getFlyersAlternativeTranslations = async (
  lang: string,
  identifier: string,
): Promise<
  {
    lang: string;
    url: string;
  }[]
> => {
  const allFlyers = await getCollection('flyers');
  const allWithUrls = await Promise.all(
    allFlyers
      .filter((flyer: CollectionEntry<'flyers'>) => {
        return flyer.data.identifier === identifier && flyer.data.lang !== lang;
      })
      .map(async (flyer: CollectionEntry<'flyers'>) => {
        return {
          lang: flyer.data.lang,
          url: await getCanonicalUrlToFlyer(
            flyer.data.lang,
            flyer.data.identifier,
          ),
        };
      }),
  );
  return allWithUrls.filter((translation) => {
    return translation.url !== undefined;
  }) as {
    lang: string;
    url: string;
  }[];
};

const entry: CollectionEntry<'flyers'> | undefined = await getEntry(
  'flyers',
  `${identifier}/${lang}`,
);

if (!entry) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found', // Translate
  });
}

if (entry.data?.fallback) {
  const fallbackUrl = await getCanonicalUrlToFlyer(
    entry.data.fallback,
    entry.data.identifier,
  );

  return Astro.redirect(
    fallbackUrl,
    302, // this in only temporary as we are waiting for translation
  );
}
---

<ContentLayout
  lang={entry.data.lang}
  title={entry.data.title}
  canonicalSlug={await getCanonicalUrlToFlyer(
    entry.data.lang,
    entry.data.identifier,
  )}
  translationSlugs={await getFlyersAlternativeTranslations(
    entry.data.lang,
    entry.data.identifier,
  )}
>
  <hgroup>
    <h1>{entry.data.title}</h1>
    <!-- FIXME: Element ul is not allowed here -->
    <ul class="meta semantic-list">
      <li>{entry.data.lang} â€“ {entry.data.germanTitle}</li>
      <li>
        <!-- FIXME: Use proper locales for date, drop timezone output -->
        Stand:
        <time datetime={entry.data.lastChecked.toLocaleString()}
          >{entry.data.lastChecked}</time
        >
      </li>
    </ul>
  </hgroup>
  <MarkdownEntry rendered={entry.render()} />
</ContentLayout>
