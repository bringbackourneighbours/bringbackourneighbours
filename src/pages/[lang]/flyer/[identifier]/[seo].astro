---
import Card from '../../../../design/Card.astro';
import CardLink from '../../../../design/CardLink.astro';
import ContentLayout from '../../../../layouts/ContentLayout.astro';
import LanguageSwitcher from '../../../../design/LanguageSwitcher.astro';
import MarkdownEntry from '../../../../design/MarkdownEntry.astro';
import Timestamp from '../../../../design/Timestamp.astro';
import { Languages } from '../../../../util/languages';
import { getCanonicalUrlToFlyer } from '../../../../util/get-canonical-url';
import { getStaticPathsForFlyers } from '../../../../util/get-static-paths';
import { getTranslationsUrlsForFlyer } from '../../../../util/get-translations-url';
import { redirectNotTranslatedForFlyer } from '../../../../util/redirect-not-found-or-not-translated';
import { type CollectionEntry } from 'astro:content';
import ShareButton from '../../../../design/ShareButton.astro';

interface Props {
  entry: CollectionEntry<'flyers'>;
}

export async function getStaticPaths() {
  return getStaticPathsForFlyers();
}

const { entry } = Astro.props;

const redirectResponse = await redirectNotTranslatedForFlyer(entry);
if (redirectResponse) {
  return Astro.redirect(redirectResponse.url, redirectResponse.status);
}

const translationSlugs = await getTranslationsUrlsForFlyer(
  entry.data.lang,
  entry.data.identifier,
);

const printUrl = `${Astro.site}print/flyer-${entry.data.lang}-${entry.data.identifier}.pdf`;
const canonicalUrl = await getCanonicalUrlToFlyer(
  entry.data.lang,
  entry.data.identifier,
);
---

<style>
  .german-title {
    display: block;
    margin-block-end: calc(-1 * var(--vspace-1) + var(--vspace-3));
  }

  .header-meta {
    display: flex;
    justify-content: flex-start;
    gap: var(--vspace);
    align-items: baseline;
    flex-wrap: wrap;
    margin-block-end: var(--vspace-1);
  }
</style>

<ContentLayout
  lang={entry.data.lang}
  title={entry.data.title}
  canonicalSlug={canonicalUrl}
  translationSlugs={translationSlugs}
>
  <LanguageSwitcher
    lang={entry.data.lang}
    translationSlugs={translationSlugs}
  />
  <hgroup>
    {
      entry.data.lang !== `${Languages.GERMAN}` && (
        <span class="german-title">{entry.data.germanTitle}</span>
      )
    }
    <h1>{entry.data.title}</h1>
    <p>
      <Timestamp entry={entry} />
    </p>
  </hgroup>

  <div class="header-meta">
    <ShareButton
      title={entry.data.title}
      url={canonicalUrl}
    />

    <Card
      invalid={true}
      size="p"
      smaller
      >Text kopieren</Card
    >
    <CardLink
      size="p"
      smaller
      href={printUrl}
      >Download als PDF</CardLink
    >
  </div>

  <MarkdownEntry rendered={entry.render()} />
</ContentLayout>
