---
import { getCollection, type CollectionEntry } from 'astro:content';
import BaseLayout from '../../../../layouts/BaseLayout.astro';

export async function getStaticPaths() {
  const flyerEntries = await getCollection('flyers');
  return flyerEntries.map((entry: CollectionEntry<'flyers'>) => {
    return {
      params: {
        lang: entry.data.lang,
        identifier: entry.data.identifier,
        seo: entry.data.seo,
      },
      props: { entry },
    };
  });
}

// we lose the type here... not sure why
const { entry } = Astro.props;

const translations = (await getCollection('flyers'))
  .filter((flyer) => {
    return (
      flyer.data.identifier === entry.data.identifier &&
      flyer.data.lang !== entry.data.lang
    );
  })
  .map((flyer) => {
    return {
      lang: flyer.data.lang,
      url: `${Astro.site}/${flyer.data.lang}/flyer/${flyer.data.identifier}/${flyer.data.seo}`,
    };
  });

if (entry.data?.fallback) {
  // this could be a middleware
  return Astro.redirect(
    `${Astro.site}/${entry.data?.fallback}/flyer/${entry.data.identifier}`,
    301,
  );
}

const { Content } = await entry.render();
---

<BaseLayout
  lang={entry.data.lang}
  title={entry.data.title}
  canonicalSlug={`${Astro.site}/${entry.data.lang}/flyer/${entry.data.identifier}/${entry.data.seo}`}
  translationSlugs={translations}
>
  <hgroup>
    <h1>{entry.data.title}</h1>
    <p>{entry.data.lang} â€“ {entry.data.germanTitle}</p>
    <p>
      Stand: <time datetime={entry.data.lastChecked}
        >{entry.data.lastChecked}</time
      >
    </p>
  </hgroup>
  <Content />
</BaseLayout>
