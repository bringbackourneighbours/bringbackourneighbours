---
import { getEntry } from 'astro:content';

import LanguageChip from '../design/LanguageChip.astro';
import ShortLink from '../design/ShortLink.astro';

import { type LanguagesValue } from '../../util/languages';
import { useUiTranslation } from '../../util/use-ui-translation';

interface Props {
  identifier: string;
  lang?: LanguagesValue;
}

const { identifier, lang = Astro.locals.lang } = Astro.props;

// FIXME: this seems needless... but without the type is not working. no idea why
const getLink = async (identifier: string) =>
  await getEntry('links', identifier);

const link = await getLink(identifier);

let localizedLinkData = {
  ...link?.data['all'],
  ...link?.data[lang],
};

const hasLinkInCurrentLang = localizedLinkData?.url && localizedLinkData?.title;

const showGoOnline = Astro.locals.isPrint && Astro.locals.isFlyer;
---

<style>
  em {
    text-align: center;
    display: block;
  }
</style>
{
  hasLinkInCurrentLang ? (
    <>
      <ShortLink
        lang={lang}
        openInNewTab={true}
        slug={localizedLinkData.slug}
        title={localizedLinkData.title}
        type={localizedLinkData.type}
        url={localizedLinkData.url!}
      />
      {Astro.locals.isPrint && Astro.locals.isKit && (
        <LanguageChip
          lang={lang}
          currentLang={Astro.locals.lang}
        />
      )}
    </>
  ) : showGoOnline ? (
    <em>
      {useUiTranslation('shortLink.onlyAvailableOnlineInOtherLanguages', lang)}
    </em>
  ) : (
    <em>{useUiTranslation('shortLink.onlyAvailableInOtherLanguages', lang)}</em>
  )
}
