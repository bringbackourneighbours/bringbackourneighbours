---
import { getEntry } from 'astro:content';

import Accordion from '../design/Accordion.astro';
import ExternalShortLinkAnchor from './ExternalShortLinkAnchor.astro';
import Icon from '../design/Icon.astro';
import languageIcon from '../../assets/icons/ion--language.svg?raw';
import NotFoundError from '../design/NotFoundError.astro';

import {
  type LanguagesValue,
  SupportedLanguages,
  UnSupportedLanguages,
} from '../../util/languages';

import { useUiTranslation } from '../../util/use-ui-translation';

export interface Props {
  identifier: string;
  lang?: LanguagesValue;
}

const { identifier, lang = Astro.locals.lang } = Astro.props;

// FIXME: this seems needless... but without the type is not working. no idea why
const getLink = async (identifier: string) =>
  await getEntry('links', identifier);

const link = await getLink(identifier);

const alternativeLanguages = [...SupportedLanguages, ...UnSupportedLanguages]
  .filter((l) => l.valueOf() !== lang)
  .filter((l) => link?.data[l]);

const showAlternatives = !(Astro.locals.isPrint && Astro.locals.isFlyer);

let localizedLinkData = {
  ...link?.data['all'],
  ...link?.data[lang],
};

const hasNoAlternatives = 0 === alternativeLanguages.length;
const onlyInOtherLangs = !(localizedLinkData?.url && localizedLinkData?.title);
---

<style>
  .alternatives {
    padding-block-start: var(--bbon-size-spacing);
    padding-inline: var(--bbon-size-spacing) var(--bbon-size-spacing);

    em {
      display: block;
      text-align: center;
      padding-block-end: var(--bbon-size-spacing);
    }
  }
</style>
{
  link ? (
    <>
      {hasNoAlternatives ? (
        <ExternalShortLinkAnchor
          lang={lang}
          identifier={identifier}
        />
      ) : (
        <Accordion variant="inverted-primary">
          <div slot="summary">
            <ExternalShortLinkAnchor
              lang={lang}
              identifier={identifier}
            />
          </div>
          <div slot="extra-icon">
            <Icon html={languageIcon} />
          </div>
          {showAlternatives && (
            <div class="alternatives">
              {!onlyInOtherLangs && (
                <em>
                  {useUiTranslation(
                    'shortLink.availableInOtherLanguages',
                    lang,
                  )}
                </em>
              )}
              <ul>
                {alternativeLanguages.map((l) => (
                  <li>
                    <ExternalShortLinkAnchor
                      identifier={identifier}
                      lang={l}
                    />
                  </li>
                ))}
              </ul>
            </div>
          )}
        </Accordion>
      )}
    </>
  ) : (
    <NotFoundError context={`ExternalShortLink/${identifier}/${lang}`} />
  )
}
