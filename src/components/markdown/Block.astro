---
import { type CollectionEntry, getCollection } from 'astro:content';
import { type LanguagesValue } from '../../util/languages';
import type { StandaloneCollections } from '../../model/standalone-collections';

import MarkdownEntry from './MarkdownEntry.astro';
import NotFoundError from '../design/NotFoundError.astro';
import NoteMachineTranslation from '../NoteMachineTranslation.astro';

export interface Props {
  identifier: string;
  lang?: LanguagesValue;
  collection?: StandaloneCollections;
  recursive?: boolean;
  isRootLevelContent?: boolean;
}

const {
  identifier,
  lang = Astro.locals.lang,
  collection = 'blocks',
  recursive = true,
  isRootLevelContent = false,
} = Astro.props;

const blockEntries = await getCollection(collection, (block) => {
  return block.slug === `${identifier}/${lang}`;
});

const blockEntry = blockEntries[0] as CollectionEntry<StandaloneCollections>;

if (isRootLevelContent) {
  Astro.locals.levelShift = 0;
}
---

{
  blockEntry ? (
    <NoteMachineTranslation
      entry={blockEntry}
      isRootLevelContent={isRootLevelContent}
    >
      <MarkdownEntry
        rendered={blockEntry.render()}
        recursive={recursive}
      />
    </NoteMachineTranslation>
  ) : (
    recursive && (
      <NotFoundError context={`${collection}/${identifier}/${lang}`} />
    )
  )
}
