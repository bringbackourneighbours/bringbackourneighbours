---
import type { StandaloneCollections } from '../../util/get-static-paths';
import { type LanguagesValue } from '../../util/languages';
import { useUiTranslation } from '../../util/use-ui-translation';
import { getCollection } from 'astro:content';
import MarkdownEntry from './MarkdownEntry.astro';
import NotFoundError from '../../design/NotFoundError.astro';

export interface Props {
  identifier: string;
  lang?: LanguagesValue;
  collection?: StandaloneCollections;
  recursive?: boolean;
}

const {
  identifier,
  lang = Astro.locals.lang,
  collection = 'blocks',
  recursive = true,
} = Astro.props;

const blockEntries = await getCollection(collection, (block) => {
  return block.slug === `${identifier}/${lang}`;
});
---

{
  blockEntries[0] ? (
    <>
      {blockEntries[0]?.data.machineTranslation && (
        <p>
          <strong>{useUiTranslation('meta.machineTranslation', lang)}</strong>
        </p>
      )}
      <MarkdownEntry
        rendered={blockEntries[0].render()}
        recursive={recursive}
      />
    </>
  ) : (
    recursive && (
      <NotFoundError context={`${collection}/${identifier}/${lang}`} />
    )
  )
}
