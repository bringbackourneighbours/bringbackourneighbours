---
import { type CollectionEntry, getCollection, getEntry } from 'astro:content';

import { type LanguagesValue } from '../util/languages';
import { useUiTranslation } from '../util/use-ui-translation';
import { useContentData } from '../util/use-content-data';

import TranslationTableRow from './design/TranslationTableRow.astro';
import Block from './markdown/Block.astro';

interface Props {
  fromLang: LanguagesValue;
  toLang: LanguagesValue;
}

const { fromLang, toLang } = Astro.props;

// we dont want the notes to appear anywhere
Astro.locals.machineTranslationNoteWasDisplayed = true;

const uiEntry = await getEntry('ui', fromLang);
const addressesCollection = await getCollection('addresses');
const blocksCollection = await getCollection('blocks');
const flyersCollection = await getCollection('flyers');
const kitsCollection = await getCollection('kits');
const pagesCollection = await getCollection('pages');

const uiEntriesKeys = [
  ...Object.keys(uiEntry?.data.meta ?? {}).map((key) => `meta.${key}`),
  ...Object.keys(uiEntry?.data.shortLink ?? {}).map(
    (key) => `shortLink.${key}`,
  ),
  ...Object.keys(uiEntry?.data?.languages ?? {}).map(
    (key) => `languages.${key}`,
  ),
  ...Object.keys(uiEntry?.data?.wizard ?? {}).map((key) => `wizard.${key}`),
];

const addressesNotesEntries = addressesCollection
  .filter((address) => address.data.translatedNotes)
  .map((address) => ({
    key: address.data.identifier,
    from: address.data.translatedNotes?.[fromLang] ?? '',
    to: address.data.translatedNotes?.[toLang] ?? '',
  }));

const blockEntries = blocksCollection?.filter(
  (blocks: CollectionEntry<'blocks'>) => {
    return blocks.data.lang === fromLang;
  },
);

const flyersEntries = flyersCollection?.filter(
  (flyers: CollectionEntry<'flyers'>) => {
    return flyers.data.lang === fromLang;
  },
);
const kitsEntries = kitsCollection?.filter((kits: CollectionEntry<'kits'>) => {
  return kits.data.lang === fromLang;
});
const pagesEntries = pagesCollection?.filter(
  (pages: CollectionEntry<'pages'>) => {
    return pages.data.lang === fromLang;
  },
);
---

<h1>
  BBON Übersetzung {useUiTranslation(`languages.${fromLang}`, 'de')}
  =&gt; {useUiTranslation(`languages.${toLang}`, 'de')}
  {new Date().toLocaleDateString()}
</h1>
<ul>
  <li>
    Dieses Dokument hat 2 Spalten: links die Quellsprache und Rechts die
    Zielsprache. Dabei sind die einzelnne Blöcke immer einer Zeile geschrieben.
  </li>
  <li>
    Eventuell sind bereits einzelne, oder große Teile übersetzt. Dann sind die
    Zellen schon gefüllt, Markiere gerne Fehler oder Verbesserungen.
  </li>
  <li>
    Bitte versuche die Formatierungen in der Zielsprache zu übernehmen: z.B.
    Überschriften und Listen
  </li>
  <li>
    Bitte nicht die
    <pre>&lt;markierten&#x2F;&gt;</pre>
    Stellen übersetzen Text-Stellen übersetzen. Einfach an der selben Stellen stehen
    lassen.
  </li>
  <li>
    Bitte nutze eine gut verständliche gender-neutrale Sprache oder wechsle mit
    männlicher und weiblicher Form ab, z.B.: „Die Ärztin und der Berater“. Wenn
    es mit Sternchen * üblich ist, also: „Lehrer*innen“ » dann mach bitte direkt
    vor dem * dieses Zeichen: \ (Schrägstrich nach links) also: „Lehrer\*innen“
  </li>
  <li>
    Bitte übersetze und erkläre beim ersten Mal das Wort deutsche Eigenwörter
    wie z.B. „Duldung“ und nutze dann das deutsche Wort in kursiv, wenn es keine
    gute Übersetzung in deiner Sprache gibt.
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>From {fromLang}</th>
      <th>To {toLang}</th>
    </tr>
  </thead>
  <tbody>
    {
      uiEntriesKeys.map((key) => (
        <TranslationTableRow>
          <div slot="id">ui/{key}</div>
          <div slot="from">{useUiTranslation(key, fromLang, false, false)}</div>
          <div slot="to">{useUiTranslation(key, toLang, false, false)}</div>
        </TranslationTableRow>
      ))
    }
    {
      addressesNotesEntries.map((entry) => (
        <TranslationTableRow>
          <div slot="id">addresses/{entry.key}.translatedNotes</div>
          <div slot="from">
            <pre> {fromLang}:</pre>
            {entry.from}
          </div>
          <div slot="to">
            <pre> {toLang}:</pre>
            {entry.to}
          </div>
        </TranslationTableRow>
      ))
    }
    {
      kitsEntries.map(async (entry) => (
        <>
          <TranslationTableRow>
            <div slot="id">kits/{entry.data.identifier}.title</div>
            <div slot="from">{entry.data.title}</div>
            <div slot="to">
              {useContentData('kits', entry.data.identifier, toLang).then(
                (toData) => toData?.title,
              )}
            </div>
          </TranslationTableRow>
          <TranslationTableRow>
            <div slot="id">kits/{entry.data.identifier}.seo</div>
            <div slot="from">{entry.data.seo}</div>
            <div slot="to">
              {useContentData('kits', entry.data.identifier, toLang).then(
                (toData) => toData?.seo,
              )}
            </div>
          </TranslationTableRow>
          <TranslationTableRow>
            <div slot="id">kits/{entry.data.identifier}</div>
            <div slot="from">
              <Block
                collection="kits"
                identifier={entry.data.identifier}
                lang={fromLang}
                recursive={false}
              />
            </div>
            <div slot="to">
              <Block
                collection="kits"
                identifier={entry.data.identifier}
                lang={toLang}
                recursive={false}
              />
            </div>
          </TranslationTableRow>
        </>
      ))
    }
    {
      blockEntries.map(async (entry) => (
        <TranslationTableRow>
          <div slot="id">blocks/{entry.data.identifier}</div>
          <div slot="from">
            <Block
              identifier={entry.data.identifier}
              lang={fromLang}
              recursive={false}
            />
          </div>
          <div slot="to">
            <Block
              identifier={entry.data.identifier}
              lang={toLang}
              recursive={false}
            />
          </div>
        </TranslationTableRow>
      ))
    }
    {
      flyersEntries.map(async (entry) => (
        <>
          <TranslationTableRow>
            <div slot="id">flyers/{entry.data.identifier}.title</div>
            <div slot="from">{entry.data.title}</div>
            <div slot="to">
              {useContentData('flyers', entry.data.identifier, toLang).then(
                (toData) => toData?.title,
              )}
            </div>
          </TranslationTableRow>
          <TranslationTableRow>
            <div slot="id">flyers/{entry.data.identifier}.seo</div>
            <div slot="from">{entry.data.seo}</div>
            <div slot="to">
              {useContentData('flyers', entry.data.identifier, toLang).then(
                (toData) => toData?.seo,
              )}
            </div>
          </TranslationTableRow>
          <TranslationTableRow>
            <div slot="id">flyers/{entry.data.identifier}</div>
            <div slot="from">
              <Block
                identifier={entry.data.identifier}
                lang={fromLang}
                recursive={false}
                collection="flyers"
              />
            </div>
            <div slot="to">
              <Block
                identifier={entry.data.identifier}
                lang={toLang}
                recursive={false}
                collection="flyers"
              />
            </div>
          </TranslationTableRow>
        </>
      ))
    }
    {
      pagesEntries.map(async (entry) => (
        <>
          <TranslationTableRow>
            <div slot="id">pages/{entry.data.identifier}.title</div>
            <div slot="from">{entry.data.title}</div>
            <div slot="to">
              {useContentData('pages', entry.data.identifier, toLang).then(
                (toData) => toData?.title,
              )}
            </div>
          </TranslationTableRow>
          <TranslationTableRow>
            <div slot="id">pages/{entry.data.identifier}.seo</div>
            <div slot="from">{entry.data.seo}</div>
            <div slot="to">
              {useContentData('pages', entry.data.identifier, toLang).then(
                (toData) => toData?.seo,
              )}
            </div>
          </TranslationTableRow>
          <TranslationTableRow>
            <div slot="id">pages/{entry.data.identifier}</div>
            <div slot="from">
              <Block
                identifier={entry.data.identifier}
                lang={fromLang}
                recursive={false}
                collection="pages"
              />
            </div>
            <div slot="to">
              <Block
                identifier={entry.data.identifier}
                lang={toLang}
                recursive={false}
                collection="pages"
              />
            </div>
          </TranslationTableRow>
        </>
      ))
    }
  </tbody>
</table>
