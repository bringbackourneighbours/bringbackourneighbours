---
import { type CollectionEntry, getCollection, getEntry } from 'astro:content';

import { type LanguagesValue } from '../util/languages';
import { useUiTranslation } from '../util/use-ui-translation';

import TranslationTableRow from '../design/TranslationTableRow.astro';
import Block from './markdown/Block.astro';

interface Props {
  fromLang: LanguagesValue;
  toLang: LanguagesValue;
}

const { fromLang, toLang } = Astro.props;

const uiEntryCollection = await getEntry('ui', fromLang);

const uiEntriesKeys = [
  ...Object.keys(uiEntryCollection?.data.meta ?? {}).map(
    (key) => `meta.${key}`,
  ),
  ...Object.keys(uiEntryCollection?.data.shortLink ?? {}).map(
    (key) => `shortLink.${key}`,
  ),
  ...Object.keys(uiEntryCollection?.data?.languages ?? {}).map(
    (key) => `languages.${key}`,
  ),
  ...Object.keys(uiEntryCollection?.data?.wizard ?? {}).map(
    (key) => `wizard.${key}`,
  ),
];

// const uiEntries = uiEntriesKeys.map(async (key) => ({
//   id: `ui/${key}`,
//   from: await useUiTranslation(key, fromLang),
//   to: await useUiTranslation(key, toLang),
// }));

const blocksEntryCollection = await getCollection('blocks');
const flyersEntryCollection = await getCollection('flyers');
const kitsEntryCollection = await getCollection('kits');
const pagesEntryCollection = await getCollection('pages');
//
const blockEntries = blocksEntryCollection?.filter(
  (blocks: CollectionEntry<'blocks'>) => {
    return blocks.data.lang === fromLang;
  },
);

const flyersEntries = flyersEntryCollection?.filter(
  (flyers: CollectionEntry<'flyers'>) => {
    return flyers.data.lang === fromLang;
  },
);
const kitsEntries = kitsEntryCollection?.filter(
  (kits: CollectionEntry<'kits'>) => {
    return kits.data.lang === fromLang;
  },
);
const pagesEntries = pagesEntryCollection?.filter(
  (pages: CollectionEntry<'pages'>) => {
    return pages.data.lang === fromLang;
  },
);
const date = new Date();
---

<h1>
  BBON Übersetzung {useUiTranslation(`languages.${fromLang}`, 'de')} =&gt; {
    useUiTranslation(`languages.${toLang}`, 'de')
  }
  {date.toLocaleDateString()}
</h1>
<ul>
  <li>
    Dieses Dokument hat 2 Spalten: links die Quellsprache und Rechts die
    Zielsprache. Dabei sind die einzelnne Blöcke immer einer Zeile geschrieben.
  </li>
  <li>
    Eventuell sind bereits einzelne, oder große Teile übersetzt. Dann sind die
    Zellen schon gefüllt, Markiere gerne Fehler oder Verbesserungen.
  </li>
  <li>
    Bitte versuche die Formatierungen in der Zielsprache zu übernehmen: z.B.
    Überschriften und Listen
  </li>
  <li>
    Bitte nicht die <pre>&lt;markierten&#x2F;&gt;</pre> Stellen übersetzen Text-Stellen
    übersetzen. Einfach an der selben Stellen stehen lassen.
  </li>
  <li>
    Bitte nutze eine gut verständliche gender-neutrale Sprache oder wechsle mit
    männlicher und weiblicher Form ab, z.B.: „Die Ärztin und der Berater“. Wenn
    es mit Sternchen * üblich ist, also: „Lehrer*innen“ » dann mach bitte direkt
    vor dem * dieses Zeichen: \ (Schrägstrich nach links) also: „Lehrer\*innen“
  </li>
  <li>
    Bitte übersetze und erkläre beim ersten Mal das Wort deutsche Eigenwörter
    „Duldung“ und nutze dann das deutsche Wort in kursiv, wenn es keine gute
    Übersetzung in deiner Sprache gibt.
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>From {fromLang}</th>
      <th>To {toLang}</th>
    </tr>
  </thead>
  <tbody>
    {
      uiEntriesKeys.map((key) => (
        <TranslationTableRow>
          <div slot="id">ui/{key}</div>
          <div slot="from">{useUiTranslation(key, fromLang)}</div>
          <div slot="to">{useUiTranslation(key, toLang)}</div>
        </TranslationTableRow>
      ))
    }
    {
      kitsEntries.map(async (entry) => (
        <TranslationTableRow>
          <div slot="id">kits/{entry.data.identifier}</div>
          <div slot="from">
            <Block
              collection="kits"
              identifier={entry.data.identifier}
              lang={fromLang}
              recursive={false}
            />
          </div>
          <div slot="to">
            <Block
              collection="kits"
              identifier={entry.data.identifier}
              lang={toLang}
              recursive={false}
            />
          </div>
        </TranslationTableRow>
      ))
    }
    {
      blockEntries.map(async (entry) => (
        <TranslationTableRow>
          <div slot="id">blocks/{entry.data.identifier}</div>
          <div slot="from">
            <Block
              identifier={entry.data.identifier}
              lang={fromLang}
              recursive={false}
            />
          </div>
          <div slot="to">
            <Block
              identifier={entry.data.identifier}
              lang={toLang}
              recursive={false}
            />
          </div>
        </TranslationTableRow>
      ))
    }
    {
      flyersEntries.map(async (entry) => (
        <TranslationTableRow>
          <div slot="id">flyers/{entry.data.identifier}</div>
          <div slot="from">
            <Block
              identifier={entry.data.identifier}
              lang={fromLang}
              recursive={false}
              collection="flyers"
            />
          </div>
          <div slot="to">
            <Block
              identifier={entry.data.identifier}
              lang={toLang}
              recursive={false}
              collection="flyers"
            />
          </div>
        </TranslationTableRow>
      ))
    }
    {
      pagesEntries.map(async (entry) => (
        <TranslationTableRow>
          <div slot="id">pages/{entry.data.identifier}</div>
          <div slot="from">
            <Block
              identifier={entry.data.identifier}
              lang={fromLang}
              recursive={false}
              collection="pages"
            />
          </div>
          <div slot="to">
            <Block
              identifier={entry.data.identifier}
              lang={toLang}
              recursive={false}
              collection="pages"
            />
          </div>
        </TranslationTableRow>
      ))
    }
  </tbody>
</table>
