---
import { DEFAULT_LANG, type LanguagesValue } from '../util/languages.enum';
import { getEntry } from 'astro:content';
import Link from '../design/Link.astro';

interface Props {
  identifier: string;
  lang?: LanguagesValue;
}

const { identifier, lang = DEFAULT_LANG } = Astro.props;

// FIXME: this seems needless... but without the type is not working. no idea why
const getAddress = async (identifier: string) =>
  await getEntry('addresses', identifier);

const address = await getAddress(identifier);
---

<style>
  address {
    margin: var(--vspace-3) 0;
    padding: var(--vspace-3) 0;
    width: fit-content;
  }
</style>

<address>
  <strong>{address?.data.name}</strong><br />
  {
    address?.data.additional && (
      <>
        {address?.data.additional}
        <br />
      </>
    )
  }
  {
    address?.data.streetLine && (
      <>
        {address?.data.streetLine}
        <br />
      </>
    )
  }
  {address?.data.zip && <>{address?.data.zip}</>}
  {address?.data.city && <>{address?.data.city}</>}
  {
    (address?.data.zip || address?.data.city) && (
      <>
        <br />
      </>
    )
  }
  {
    address?.data.phone && (
      <>
        {address?.data.phone}
        <br />
      </>
    )
  }

  {
    address?.data.mail && (
      <>
        <Link href={`mailto:${address?.data.mail}`}>{address?.data.mail}</Link>
        <br />
      </>
    )
  }
  {
    address?.data.url && (
      <>
        <Link href={address?.data.url} />
        <br />
      </>
    )
  }
  {
    !Astro.locals.isPrint && address?.data.translatedNotes?.[lang] && (
      <>
        {address?.data.translatedNotes?.[lang]}
        <br />
      </>
    )
  }
</address>
