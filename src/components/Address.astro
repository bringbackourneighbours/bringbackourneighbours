---
import { type LanguagesValue } from '../util/languages';
import { getEntry } from 'astro:content';
import Link from '../design/Link.astro';
import ExternalShortLink from './ExternalShortLink.astro';
import NotFoundError from '../design/NotFoundError.astro';

interface Props {
  identifier: string;
  lang?: LanguagesValue;
  showLocation?: boolean;
  showContact?: boolean;
  showWeb?: boolean;
  showBbon?: boolean;
  showNotes?: boolean;
}

const isPrintedFlyer = Astro.locals.isPrint && Astro.locals.isFlyer;

const {
  identifier,
  lang = Astro.locals.lang,
  showLocation = !isPrintedFlyer,
  showContact = !isPrintedFlyer,
  showWeb = true,
  showBbon = true,
  showNotes = !isPrintedFlyer,
} = Astro.props;

// FIXME: this seems needless... but without the type is not working. no idea why
const getAddress = async (identifier: string) =>
  await getEntry('addresses', identifier);

const address = (await getAddress(identifier))?.data;

const hasLocation =
  address?.additional || address?.streetLine || address?.zip || address?.city;

const hasContact =
  address?.phone || address?.phones || address?.mail || address?.mails;

const hasWeb =
  address?.url ||
  address?.facebook ||
  address?.instagram ||
  address?.telegram ||
  address?.twitter;
---

<style>
  address {
    margin: var(--bbon-size-spacing) 0;
    padding-inline-start: var(--bbon-size-spacing);
    width: fit-content;
    border-inline-start: var(--bbon-size-border) solid var(--bbon-color-primary);
  }
</style>

{
  address ? (
    <address>
      <strong>{address?.name}</strong> <br />
      {showLocation && hasLocation && (
        <>
          {address?.additional && (
            <>
              {address?.additional}
              <br />
            </>
          )}
          {address?.streetLine && (
            <>
              {address?.streetLine}
              <br />
            </>
          )}
          {address?.zip && <>{address?.zip + ' '}</>}
          {address?.city && <>{address?.city}</>}
          {(address?.zip || address?.city) && (
            <>
              <br />
            </>
          )}
        </>
      )}
      {showContact && hasContact && (
        <>
          {[address?.phone, ...(address?.phones ?? [])].map(
            (phone) =>
              phone && (
                <>
                  {phone}
                  <br />
                </>
              ),
          )}

          {[address?.mail, ...(address?.mails ?? [])].map((mail) => (
            <>
              <Link href={`mailto:${mail}`}>{mail}</Link> <br />
            </>
          ))}
        </>
      )}
      {showWeb && hasWeb && (
        <>
          {address?.url && (
            <>
              <Link
                href={address?.url}
                openInNewTab={true}
              />
              <br />
            </>
          )}

          {address?.facebook && (
            <>
              Facebook:
              <Link
                href={`https://www.facebook.com/${address?.facebook}`}
                openInNewTab={true}
              >
                @{address?.facebook}
              </Link>
              <br />
            </>
          )}
          {address?.instagram && (
            <>
              Instagram:
              <Link
                href={`https://instagram.com/${address?.instagram}`}
                openInNewTab={true}
              >
                @{address?.instagram}
              </Link>
              <br />
            </>
          )}
          {address?.telegram && (
            <>
              Telegram:
              <Link
                href={`https://t.me/${address?.telegram}`}
                openInNewTab={true}
              >
                @{address?.telegram}
              </Link>
              <br />
            </>
          )}
        </>
      )}
      {address?.twitter && (
        <>
          twitter/X:
          <Link
            href={`https://twitter.com/${address?.twitter}`}
            openInNewTab={true}
          >
            @{address?.twitter}
          </Link>
          <br />
        </>
      )}
      {showBbon && address?.bbon && (
        <>
          <ExternalShortLink identifier={address.bbon} />
          <br />
        </>
      )}
      {showNotes && address?.translatedNotes?.[lang] && (
        <>
          <br />
          {address?.translatedNotes?.[lang]}
        </>
      )}
    </address>
  ) : (
    <NotFoundError context={`address/${identifier}/${lang}`} />
  )
}
