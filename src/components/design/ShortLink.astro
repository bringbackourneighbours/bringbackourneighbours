---
import Icon from './Icon.astro';
import Link from './Link.astro';
import audioIcon from '../../assets/icons/ion--volume-high.svg?raw';
import pdfIcon from '../../assets/icons/ion--document-text.svg?raw';
import docIcon from '../../assets/icons/ion--document.svg?raw';
import videoIcon from '../../assets/icons/ion--film.svg?raw';
import webIcon from '../../assets/icons/ion--globe.svg?raw';
import bbonLogo from '../../assets/logo.svg?raw';

import type { LinkTypes } from '../../util/link-icon-type';
import type { LanguagesValue } from '../../model/languages';
import { linkUrl } from '../../../astro.config.mjs';

interface Props {
  lang: LanguagesValue;
  openInNewTab: boolean;
  slug?: string;
  title?: string;
  type?: LinkTypes;
  url: string;
}

export const getIconForType = (type?: LinkTypes) => {
  switch (type) {
    case 'PDF':
      return pdfIcon;
    case 'DOC':
      return docIcon;
    case 'VIDEO':
      return videoIcon;
    case 'AUDIO':
      return audioIcon;
    case 'FLYER':
    case 'KIT':
    case 'PAGE':
      return bbonLogo;
    case 'WEB':
    default:
      return webIcon;
  }
};

const { slug, title, url, lang, openInNewTab, type } = Astro.props;

let iconHtml = getIconForType(type);

const slotText = (await Astro.slots.render('default')) || null;

const label = slotText ?? title;
---

<Link
  href={url}
  lang={lang}
  openInNewTab={openInNewTab}
>
  {
    !slotText && (
      <span class="type">
        <Icon
          html={iconHtml}
          size="0.9em"
        />
      </span>
    )
  }

  {
    Astro.locals.isPrint && (
      <>
        {slotText}
        {` ${linkUrl}/${slug} `}
      </>
    )
  }

  {!Astro.locals.isPrint && <>{label}</>}
</Link>
