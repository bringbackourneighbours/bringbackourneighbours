---
import { getEntry } from 'astro:content';
import Link from '../design/Link.astro';
import {
  type LanguagesValue,
  SupportedLanguages,
  UnSupportedLanguages,
} from '../util/languages';

interface Props {
  identifier: string;
  lang?: LanguagesValue;
}

const { identifier, lang = Astro.locals.lang } = Astro.props;

// FIXME: this seems needless... but without the type is not working. no idea why
const getLink = async (identifier: string) =>
  await getEntry('links', identifier);

const link = await getLink(identifier);

let localizedLinkData = {
  ...link?.data['all'],
  ...link?.data[lang],
};

const alternativeLanguages = [...SupportedLanguages, ...UnSupportedLanguages]
  .filter((l) => l.valueOf() !== lang)
  .filter((l) => link?.data[l]);
---

{
  localizedLinkData?.url ? (
    <Link
      href={localizedLinkData.url}
      lang={lang}
    >
      {localizedLinkData.type}: {localizedLinkData.title}
    </Link>
  ) : (
    <>
      <p>
        <em>LINK NOT FOUND.</em>
      </p>
      <p>Alternatives:</p>
      <ul>
        {alternativeLanguages.map((l) => (
          <li>
            <Astro.self
              identifier={identifier}
              lang={l}
            />
          </li>
        ))}
      </ul>
    </>
  )
}
