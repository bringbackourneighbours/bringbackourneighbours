---
import { getEntry } from 'astro:content';

import Accordion from '../design/Accordion.astro';
import ExternalShortLinkAnchor from './ExternalShortLinkAnchor.astro';

import {
  type LanguagesValue,
  SupportedLanguages,
  UnSupportedLanguages,
} from '../util/languages';

import { useUiTranslation } from '../util/use-ui-translation';

interface Props {
  identifier: string;
  lang?: LanguagesValue;
}

const { identifier, lang = Astro.locals.lang } = Astro.props;

// FIXME: this seems needless... but without the type is not working. no idea why
const getLink = async (identifier: string) =>
  await getEntry('links', identifier);

const link = await getLink(identifier);

const alternativeLanguages = [...SupportedLanguages, ...UnSupportedLanguages]
  .filter((l) => l.valueOf() !== lang)
  .filter((l) => link?.data[l]);

const showAlternatives = !(Astro.locals.isPrint && Astro.locals.isFlyer);
---

<style>
  .alternatives {
    padding-inline-start: var(--vspace);
  }
</style>

<Accordion variant="inverted-primary">
  <div slot="summary">
    <ExternalShortLinkAnchor
      lang={lang}
      identifier={identifier}
    />
  </div>
  {
    showAlternatives && (
      <div class="alternatives">
        <p>{useUiTranslation('shortLink.availableInOtherLanguages', lang)}</p>
        <ul>
          {alternativeLanguages.map((l) => (
            <li>
              <ExternalShortLinkAnchor
                identifier={identifier}
                lang={l}
              />
            </li>
          ))}
        </ul>
      </div>
    )
  }
</Accordion>
